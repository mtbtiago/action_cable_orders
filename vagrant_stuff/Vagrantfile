# frozen_string_literal: true
# -*- mode: ruby -*-
# vi: set ft=ruby :

##############################################################################################################################
# Tiago, 06/11/2016 10:44 22:44
# This configuration sets a VM for production, in order to have a Rails app running inside a Windows box
# ubuntu/trusty32 due problemes to run 64 bits VM in old Windows boxes
# Stack:
# - mysql, opened to host to read/write data from windows apps. Use port 4406
# - Rails5 app of your election. Must be in shared folter /vagrant/<app_name>
# - unicorn
# - nginx
#
# Followed this tutorial: https://www.digitalocean.com/community/tutorials/how-to-deploy-a-rails-app-with-unicorn-and-nginx-on-ubuntu-14-04
#
# HowTo:
# In a clean folder:
# `mkdir .vagrant`
# copy this file
# `vagrant up`
#
# Optional parameters, before vagrant up:
# APP_NAME    # aplication name, application directory: /vagrant/<app_name>
# DB_USER     # database.yml database user. Festricted for localhost
# DB_PASSWORD # database.yml database password. Same for external user 'host'
#
# MySQL access from host can be done by user 'host' with same password. Host access is restricted to host ip (10.0.2.2)
#
# Windows host. Configure firewall opening only port 8080. SSH 2222, mysql 4406 and rails 3010 must be closed.
#
##############################################################################################################################

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure('2') do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # You can search for boxes at https://atlas.hashicorp.com/search.
  config.vm.box = 'ubuntu/trusty32'

  config.vm.provider :virtualbox do |vb|
    vb.memory = 1024
    ### Change network card to PCnet-FAST III
    # For NAT adapter
    vb.customize ['modifyvm', :id, '--nictype1', 'Am79C973']
    # http://serverfault.com/questions/409794/vagrant-virtualbox-cant-resolve-some-domains-from-w-in-vm
    # https://serverfault.com/questions/453185/vagrant-virtualbox-dns-10-0-2-3-not-working
    # vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
    vb.customize ['modifyvm', :id, '--natdnsproxy1', 'on']
  end

  # Forward the Rails server default port to the host
  config.vm.network :forwarded_port, guest: 3000, host: 3010 # closed in firewall
  config.vm.network :forwarded_port, guest: 3306, host: 4406 # closed in firewall
  config.vm.network :forwarded_port, guest: 80,   host: 8080 # only open this port for other machines access
  config.ssh.forward_agent = true
  # default user/password credentials
  config.ssh.username = 'vagrant'
  config.ssh.password = 'vagrant'

  app_name = ENV['APP_NAME'] || 'comesano'
  db_user = ENV['DB_USER'] || 'rails'
  db_password = ENV['DB_PASSWORD'] || 'rails'

  script_env = { APP_NAME: app_name, DB_USER: db_user, DB_PASSWORD: db_password }

  provision_shell_root = <<-SCRIPT
    apt-get update
    sudo apt-get --yes install git-core curl zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev libcurl4-openssl-dev python-software-properties libffi-dev htop zsh
  SCRIPT

  provision_shell_user = <<-SCRIPT
    ################################# node.js #############################
    curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -
    sudo apt-get install -y nodejs
    cd

    ################################# rbenv #############################
    cd
    mkdir -p tmp/sockets
    git clone https://github.com/rbenv/rbenv.git ~/.rbenv
    echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bashrc
    # http://stackoverflow.com/questions/29813764/su-bundle-command-not-found-when-starting-unicorn
    echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.profile
    echo 'eval "$(rbenv init -)"' >> ~/.bashrc

    export PATH="$HOME/.rbenv/bin:$PATH"
    eval "$(rbenv init -)"

    git clone https://github.com/rbenv/ruby-build.git ~/.rbenv/plugins/ruby-build
    echo 'export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"' >> ~/.bashrc

    export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH"

    cd ~/.rbenv/plugins
    git clone https://github.com/sstephenson/rbenv-vars.git
    cd

    ################################# ruby 2.3.1 #############################
    rbenv install 2.3.1
    rbenv global 2.3.1
    ruby -v

    ################################# bundler #############################
    gem update --system
    yes | gem update
    gem install bundler

    ################################# rails #############################
    gem install rails
    rbenv rehash
    rails -v

  SCRIPT

  provision_shell_mysql = <<-SCRIPT
    ################################# mysql #############################
    sudo debconf-set-selections <<< "mysql-server mysql-server/root_password password $DB_PASSWORD"
    sudo debconf-set-selections <<< "mysql-server mysql-server/root_password_again password $DB_PASSWORD"
    sudo apt-get --yes install mysql-server mysql-client libmysqlclient-dev
    # grant access from outside VM
    sudo sed -i -- 's/127.0.0.1/0.0.0.0/g' /etc/mysql/my.cnf
    sudo /etc/init.d/mysql restart
    mysql -u root -p$DB_PASSWORD -e "create user '$DB_USER'@'localhost' identified by '$DB_PASSWORD';"
    mysql -u root -p$DB_PASSWORD -e "grant all on *.* to '$DB_USER'@'localhost' identified by '$DB_PASSWORD';"
    mysql -u root -p$DB_PASSWORD -e "create user 'host'@'10.0.2.2' identified by '$DB_PASSWORD';"
    mysql -u root -p$DB_PASSWORD -e "grant all on *.* to 'host'@'10.0.2.2' identified by '$DB_PASSWORD';"
  SCRIPT

  provision_shell_app = <<-SCRIPT
    ################################# app #############################
    cd /vagrant/$APP_NAME
    export PATH=$PATH:/home/vagrant/.rbenv/shims/
    bundle install
    bundle update
    echo "SECRET_KEY_BASE=`rake secret`" > .rbenv-vars
    echo "DB_USER=$DB_USER" >> .rbenv-vars
    echo "DB_PASSWORD=$DB_PASSWORD" >> .rbenv-vars

    RAILS_ENV=production rake db:create db:migrate db:seed
    RAILS_ENV=production rake assets:precompile

    mkdir -p shared/pids shared/sockets shared/log
  SCRIPT

  provision_shell_unicorn = <<-SCRIPT
    ################################# unicorn #############################
    locale-gen es_ES.UTF-8
    cp /home/vagrant/tmp/unicorn_init /etc/init.d/unicorn_$APP_NAME
    sed -i -- "s/app_name_here/$APP_NAME/g" /etc/init.d/unicorn_$APP_NAME
    chmod 755 /etc/init.d/unicorn_$APP_NAME
    update-rc.d unicorn_$APP_NAME defaults
    service unicorn_$APP_NAME start
  SCRIPT

  provision_shell_nginx = <<-SCRIPT
    ################################# unicorn #############################
    apt-get --yes install nginx
    cp /home/vagrant/tmp/nginx_sites_available /etc/nginx/sites-available/default
    sed -i -- "s/app_name_here/$APP_NAME/g" /etc/nginx/sites-available/default
    service nginx restart
  SCRIPT

  ####################################################################################################################
  # Advice: comment all provisions but one, execute it. If all is ok, take a snapshot of the VM and run next provision
  ####################################################################################################################

  config.vm.provision 'shell', inline: provision_shell_root, name: 'PROVISION_SHELL_ROOT', env: script_env
  # configure oh-my-shell
  config.vm.provision :shell, inline: 'git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh', privileged: false
  config.vm.provision :shell, inline: 'cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc', privileged: false
  config.vm.provision :shell, inline: "echo 'export PATH=\"$HOME/.rbenv/bin:$PATH\"' >> ~/.zshrc", privileged: false
  config.vm.provision :shell, inline: "echo 'eval \"$(rbenv init -)\"' >> ~/.zshrc", privileged: false
  config.vm.provision :shell, inline: "echo 'export PATH=\"$HOME/.rbenv/plugins/ruby-build/bin:$PATH\"' >> ~/.zshrc", privileged: false
  config.vm.provision :shell, inline: 'chsh -s /bin/zsh vagrant'
  # continue installing stuff
  config.vm.provision 'shell', inline: provision_shell_user, name: 'PROVISION_SHELL_USER', env: script_env, privileged: false
  config.vm.provision 'shell', inline: provision_shell_mysql, name: 'PROVISION_SHELL_MYSQL', env: script_env
  config.vm.provision 'shell', inline: provision_shell_app, name: 'PROVISION_SHELL_APP', env: script_env, privileged: false
  config.vm.provision :file, source: 'unicorn_init', destination: '/home/vagrant/tmp/unicorn_init'
  config.vm.provision :shell, inline: provision_shell_unicorn, name: 'PROVISION_SHELL_UNICORN', env: script_env
  config.vm.provision :file, source: 'nginx_sites_available', destination: '/home/vagrant/tmp/nginx_sites_available'
  config.vm.provision :shell, inline: provision_shell_nginx, name: 'PROVISION_SHELL_NGINX', env: script_env
  config.vm.provision :shell, inline: 'apt-get --yes autoremove'
  # important: due services are started before shared folders are mounted, we need to start it again by a provision
  config.vm.provision :shell, inline: "sudo service unicorn_#{app_name} start", name: 'unicorn after shared folders mounted', run: :always

  ###############################################
  # Left here for your info: postgresql version #
  ###############################################
  # provision_shell_postgresql = <<-SCRIPT
  #   ################################# postgresql #############################
  #   sudo locale-gen es_ES.UTF-8
  #   sudo sh -c "echo 'deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main' > /etc/apt/sources.list.d/pgdg.list"
  #   wget --quiet -O - http://apt.postgresql.org/pub/repos/apt/ACCC4CF8.asc | sudo apt-key add -
  #   sudo apt-get update
  #   sudo apt-get install postgresql-common
  #   sudo apt-get install postgresql-9.5 libpq-dev
  #
  #   echo # postgresql user
  #   sudo -u postgres createuser ubuntu -s
  #   sudo -u postgres psql -c "ALTER USER ubuntu WITH PASSWORD 'ubuntu';"
  # SCRIPT
  # config.vm.provision 'shell', inline: provision_shell_postgresql, name: 'PROVISION_SHELL_POSTGRESQL', env: script_env

  #############################################################
  # Default vagrant comments. You can learn something from them
  #############################################################

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
end
